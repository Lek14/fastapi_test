from getgauge.python import step, before_suite, after_suite
import requests

BASE_URL = "http://127.0.0.1:8000/tasks"  # URL твоего FastAPI

task_id = None  # будем хранить id созданной задачи

@before_suite
def before_suite():
    print("Тесты стартуют, база очищена логически")

@after_suite
def after_suite():
    print("Все тесты завершены")

@step("Создать задачу <title> с описанием <description> и статусом <status>")
def create_task(title, description, status):
    global task_id
    data = {"title": title, "description": description, "status": status}
    resp = requests.post(BASE_URL, json=data)
    assert resp.status_code == 200 or resp.status_code == 201, f"Ошибка создания: {resp.text}"
    task_id = resp.json()["id"]

@step("Получить список задач и убедиться что задача <title> существует")
def check_task_exists(title):
    resp = requests.get(BASE_URL)
    assert resp.status_code == 200, f"Ошибка получения списка задач: {resp.text}"
    tasks = resp.json()
    assert any(task["title"] == title for task in tasks), f"Задача {title} не найдена"

@step("Обновить задачу <title> и сменить статус на <new_status>")
def update_task_status(title, new_status):
    global task_id
    data = {"status": new_status}
    resp = requests.patch(f"{BASE_URL}/{task_id}", json=data)
    assert resp.status_code == 200, f"Ошибка обновления: {resp.text}"

@step("Получить задачу <title> и убедиться что статус <status>")
def check_task_status(title, status):
    global task_id
    resp = requests.get(f"{BASE_URL}/{task_id}")
    assert resp.status_code == 200, f"Ошибка получения задачи: {resp.text}"
    task = resp.json()
    assert task["status"] == status, f"Статус задачи {title} = {task['status']}, ожидалось {status}"

@step("Удалить задачу <title>")
def delete_task(title):
    global task_id
    resp = requests.delete(f"{BASE_URL}/{task_id}")
    # FastAPI чаще всего возвращает 204 при успешном удалении
    assert resp.status_code in [200, 204], f"Ошибка удаления: {resp.text}"


@step("Проверить что задача <title> отсутствует в списке")
def check_task_deleted(title):
    resp = requests.get(BASE_URL)
    assert resp.status_code == 200, f"Ошибка получения списка задач: {resp.text}"
    tasks = resp.json()
    assert all(task["title"] != title for task in tasks), f"Задача {title} всё ещё существует"
